{"version":3,"sources":["Components/Feedback/Section.js","Components/Feedback/FeedbackOptions.js","Components/Feedback/FeedbackStats.js","Components/Feedback/Notification.js","App.js","reportWebVitals.js","index.js","Components/Feedback/Feedback.module.css"],"names":["Section","children","FeedbackOptions","onChangeStats","ButtonGroup","variant","color","aria-label","Button","className","style","button_label","name","onClick","e","currentTarget","FeedbackStats","stats","good","neutral","bad","total","positive","feedback_stats","stats_header","stats_label","Notification","message","notification","App","state","handleChangeStats","setState","prev","getTotal","getPositivePercentage","Math","ceil","this","width","margin","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"qRAKeA,EAHC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OAAO,8BAAMA,K,gBCkBFC,EAhBS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACvB,OACI,eAACC,EAAA,EAAD,CAAaC,QAAQ,YAAYC,MAAM,UAAUC,aAAW,iCAA5D,UACI,cAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,aAAcC,KAAK,OAAOC,QAAS,SAACC,GAAD,OAAOX,EAAcW,EAAEC,cAAcH,OAAjG,kBAGA,cAACJ,EAAA,EAAD,CAAQC,UAAWC,IAAMC,aAAcC,KAAK,UAAUC,QAAS,SAACC,GAAD,OAAOX,EAAcW,EAAEC,cAAcH,OAApG,qBAGA,cAACJ,EAAA,EAAD,CAAQC,UAAWC,IAAMC,aAAcC,KAAK,MAAMC,QAAS,SAACC,GAAD,OAAOX,EAAcW,EAAEC,cAAcH,OAAhG,qBCDGI,EAXO,SAAC,GAAD,QAAGC,MAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,IAAOC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,SAAzC,OAClB,sBAAKb,UAAWC,IAAMa,eAAtB,UACI,oBAAId,UAAWC,IAAMc,aAArB,wBACA,oBAAGf,UAAWC,IAAMe,YAApB,mBAAwCP,KACxC,oBAAGT,UAAWC,IAAMe,YAApB,sBAA2CN,KAC3C,oBAAGV,UAAWC,IAAMe,YAApB,kBAAuCL,KACvC,oBAAGX,UAAWC,IAAMe,YAApB,oBAAyCJ,KACzC,oBAAGZ,UAAWC,IAAMe,YAApB,gCAAqDH,EAArD,WCLOI,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,oBAAIlB,UAAWC,IAAMkB,aAArB,SAAoCD,KCkD3DE,E,4MA3CXC,MAAQ,CACJZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETW,kBAAoB,SAACnB,GACjB,EAAKoB,UAAS,SAACC,GAAD,sBACTrB,EAAOqB,EAAKrB,GAAQ,O,EAG7BsB,SAAW,WACP,MAA+B,EAAKJ,MACpC,OADA,EAAQZ,KAAR,EAAcC,QAAd,EAAuBC,K,EAG3Be,sBAAwB,WACpB,IAAQjB,EAAS,EAAKY,MAAdZ,KACR,OAAOA,EAAOkB,KAAKC,KAAMnB,EAAO,EAAKgB,WAAc,KAAO,IAAM,M,4CAGpE,WACqBI,KAAKR,MAAdZ,KACR,OACI,mCACI,sBAAKR,MAAO,CAAE6B,MAAO,QAASC,OAAQ,UAAtC,UACI,uDACA,eAAC,EAAD,WACI,cAAC,EAAD,CAAiBrC,cAAemC,KAAKP,oBACpCO,KAAKJ,WACF,cAAC,EAAD,CACIZ,SAAUgB,KAAKH,wBACflB,MAAOqB,KAAKR,MACZT,MAAOiB,KAAKJ,aAGhB,cAAC,EAAD,CAAcP,QAAQ,kC,GAnChCc,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,aAAe,+BAA+B,YAAc,iC","file":"static/js/main.98bddce7.chunk.js","sourcesContent":["import style from \"./Feedback.module.css\"\r\n\r\nconst Section = ({ children }) => {\r\n    return <div>{children}</div>\r\n}\r\nexport default Section\r\n","import React from \"react\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\"\r\nimport style from \"./Feedback.module.css\"\r\n\r\nconst FeedbackOptions = ({ onChangeStats }) => {\r\n    return (\r\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n            <Button className={style.button_label} name=\"good\" onClick={(e) => onChangeStats(e.currentTarget.name)}>\r\n                Good\r\n            </Button>\r\n            <Button className={style.button_label} name=\"neutral\" onClick={(e) => onChangeStats(e.currentTarget.name)}>\r\n                Neutral\r\n            </Button>\r\n            <Button className={style.button_label} name=\"bad\" onClick={(e) => onChangeStats(e.currentTarget.name)}>\r\n                Bad\r\n            </Button>\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import style from \"./Feedback.module.css\"\r\n\r\nconst FeedbackStats = ({ stats: { good, neutral, bad }, total, positive }) => (\r\n    <div className={style.feedback_stats}>\r\n        <h1 className={style.stats_header}>Statistics</h1>\r\n        <p className={style.stats_label}>Good: {good}</p>\r\n        <p className={style.stats_label}>Neutral: {neutral}</p>\r\n        <p className={style.stats_label}>Bad: {bad}</p>\r\n        <p className={style.stats_label}>Total: {total}</p>\r\n        <p className={style.stats_label}>Positive feedback: {positive} </p>\r\n    </div>\r\n)\r\n\r\nexport default FeedbackStats\r\n","import style from \"./Feedback.module.css\"\r\n\r\nconst Notification = ({ message }) => <h3 className={style.notification}>{message}</h3>\r\n\r\nexport default Notification\r\n","//data\nimport React, { Component } from \"react\"\n//components\nimport Section from \"./Components/Feedback/Section\"\nimport FeedbackOptions from \"./Components/Feedback/FeedbackOptions\"\nimport FeedbackStats from \"./Components/Feedback/FeedbackStats\"\nimport Notification from \"./Components/Feedback/Notification\"\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    }\n    handleChangeStats = (name) => {\n        this.setState((prev) => ({\n            [name]: prev[name] + 1,\n        }))\n    }\n    getTotal = () => {\n        const { good, neutral, bad } = this.state\n        return good + neutral + bad\n    }\n    getPositivePercentage = () => {\n        const { good } = this.state\n        return good ? Math.ceil((good / this.getTotal()) * 100) + \"%\" : \"0%\"\n    }\n\n    render() {\n        const { good } = this.state\n        return (\n            <>\n                <div style={{ width: \"400px\", margin: \"0 auto\" }}>\n                    <h1>Please leave feedback</h1>\n                    <Section>\n                        <FeedbackOptions onChangeStats={this.handleChangeStats} />\n                        {this.getTotal() ? (\n                            <FeedbackStats\n                                positive={this.getPositivePercentage()}\n                                stats={this.state}\n                                total={this.getTotal()}\n                            />\n                        ) : (\n                            <Notification message=\"No feedback given\" />\n                        )}\n                    </Section>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_label\":\"Feedback_button_label__2tE5g\",\"stats_label\":\"Feedback_stats_label__25uzB\"};"],"sourceRoot":""}